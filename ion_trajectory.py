import numpy as np
from scipy.interpolate import RegularGridInterpolator as rgi

def Euler(dt, x0, v0, q, m, interp):
    E = interp(x0) #remember this should be a 3D array
    F = q*E # Evaluates the force due to the capacitors
    
    a = F/m
    v = v0 + a*dt
    x = x0 + a*dt*dt
    return x,v

mesh=[] # We take the meshgrid points
V=[] # We take the potential generated by our capacitors at each mesh point
[Ex, Ey, Ez] = np.gradient(-V) # The Ei may have to be swapped, i'm not sure yet

interp = rgi(grid, [Ex, Ey, Ez]) # interpolator function. It should return E at certain points (x,y,z) to be given.

#time differential and initial conditions
dt = 1
x0 = [0] #This should be an array of 3D arrays
v0 = [0] #This should be an array of 3D arrays
q=[] #ion charge
m=[] #ion mass

x = [x0] # We will save our trajectories here
v = v0

t = 0 # Total span of time we want to see the trajectories in
for k in range(t/dt):
    #Euler's method for each particle
    for i in range(len(x0)):
        x1,v1 = Euler(dt, x[k][i], v[i], q[i], m[i], interp)
        x.append(x1)
        v=v1



